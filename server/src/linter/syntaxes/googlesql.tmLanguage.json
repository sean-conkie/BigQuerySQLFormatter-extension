{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "GoogleSQL",
  "patterns": [
    { "include": "#storage" },
    { "include": "#constants" },
    { "include": "#custom" },
    { "include": "#comments" },
    { "include": "#from" },
    { "include": "#functions" },
    { "include": "#keywords" },
    { "include": "#ddl" },
    { "include": "#dml" },
    { "include": "#columns" },
    { "include": "#strings" },
    { "include": "#params" },
    { "include": "#punctuation" },
    { "include": "#regexps" },
    { "include": "#javascript" },
    { "include": "#whitespace" }
  ],
  "repository": {
    "storage": {
      "patterns": [
        {
          "match": "(?i)\\b(array|boolean|bytes|date(?!\\s*\\()|datetime(?!\\s*\\()|geography|numeric|decimal|bignumeric|bigdecimal|float|float64|int64|int|smallint|integer|bigint|tinyint|byteint|bool|record|any\\s+type|string(?!\\s*\\()|struct|time(?!\\s*\\(|\\s+as\\s+of|\\s+zone)|timestamp(?!\\s*\\())\\b",
          "name": "storage.type.sql"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "match": "(\\s+)?\\b(\\d+\\.\\d+|\\d+\\.|\\.\\d+|\\d+)\\b",
          "captures": {
            "1": { "name": "punctuation.whitespace.leading.sql" },
            "2": { "name": "constant.numeric.sql" }
          },
          "name": "meta.constant.sql"
        },
        {
          "match": "(?i)(\\s+)?\\b(true|false)\\b",
          "captures": {
            "1": { "name": "punctuation.whitespace.leading.sql" },
            "2": { "name": "constant.boolean.sql" }
          },
          "name": "meta.constant.sql"
        },
        {
          "captures": {
            "1": { "name": "punctuation.whitespace.leading.sql" },
            "2": { "name": "constant.other.null.sql" }
          },
          "match": "(?i)(\\s+)?\\b(null)\\b",
          "name": "meta.constant.sql"
        }
      ]
    },
    "whitespace": {
      "patterns": [
        {
          "match": "^ *",
          "name": "punctuation.whitespace.leading.sql"
        },
        {
          "match": " *$",
          "name": "punctuation.whitespace.trailing.sql"
        },
        {
          "match": " *",
          "name": "punctuation.whitespace.sql"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "begin": "(^[ \\t]+)?(?=--)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.sql"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "--",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.sql"
                }
              },
              "end": "\\n",
              "name": "comment.line.double-dash.sql"
            }
          ]
        },
        {
          "begin": "(^[ \\t]+)?(?=#)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.sql"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "#",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.sql"
                }
              },
              "end": "\\n",
              "name": "comment.line.number-sign.sql"
            }
          ]
        },
        {
          "begin": "/\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.sql"
            }
          },
          "end": "\\*/",
          "name": "comment.block.c"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.section.bracket.round.begin.sql"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.section.bracket.round.end.sql"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "match": "\\)",
          "name": "punctuation.unmatched.bracket.round.end.sql"
        },
        {
          "match": ",",
          "name": "punctuation.separator.comma.sql"
        },
        {
          "match": "\\.",
          "name": "punctuation.separator.period.sql"
        },
        {
          "match": ";",
          "name": "punctuation.terminator.statement.semicolon.sql"
        }
      ]
    },
    "regexps": {
      "patterns": [
        {
          "begin": "r[\"]",
          "beginCaptures": {
            "0": {
              "name": "string.regex.begin.sql"
            }
          },
          "end": "[\"]",
          "endCaptures": {
            "0": {
              "name": "string.regex.end.sql"
            }
          },
          "name": "meta.regex.sql",
          "contentName": "string.regexp.sql",
          "patterns": [
            {
              "include": "#string_interpolation"
            },
            {
              "include": "#string_escape"
            }
          ]
        },
        {
          "begin": "r[']",
          "beginCaptures": {
            "0": {
              "name": "string.regex.begin.sql"
            }
          },
          "end": "[']",
          "endCaptures": {
            "0": {
              "name": "string.regex.end.sql"
            }
          },
          "name": "meta.regex.sql",
          "contentName": "string.regexp.sql",
          "patterns": [
            {
              "include": "#string_interpolation"
            },
            {
              "include": "#string_escape"
            }
          ]
        }
      ]
    },
    "javascript": {
      "patterns": [
        {
          "begin": "(?i:\\b(as)\\s+)r{0,1}(\"\"\")",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.alias.sql"
            },
            "2": {
              "name": "string.quoted.double.begin.sql"
            }
          },
          "end": "\"\"\"",
          "endCaptures": {
            "0": {
              "name": "string.quoted.double.end.sql"
            }
          },
          "name": "meta.embedded.js",
          "contentName": "source.embedded.js",
          "patterns": [
            {
              "include": "source.js"
            }
          ]
        }
      ]
    },
    "string_escape": {
      "match": "\\\\.",
      "name": "constant.character.escape.sql"
    },
    "string_interpolation": {
      "captures": {
        "1": {
          "name": "punctuation.definition.string.end.sql"
        }
      },
      "match": "(#\\{)([^\\}]*)(\\})",
      "name": "string.interpolated.sql"
    },
    "strings": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "string.quoted.single.sql"
            }
          },
          "comment": "this is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.",
          "match": "('(?>\\.|[^'\\\\])*')",
          "name": "meta.string.sql"
        },
        {
          "captures": {
            "1": {
              "name": "string.quoted.double.sql"
            }
          },
          "comment": "this is faster than the next begin/end rule since sub-pattern will match till end-of-line and SQL files tend to have very long lines.",
          "match": "(\"(?>\\.|[^\"\\\\])*\")",
          "name": "meta.string.sql"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "captures": {
            "1": { "name": "support.function.scalar.sql" }
          },
          "match": "(?i)\\b(CURRENT_(?:DATE|DATETIME|TIME(?:STAMP)?|USER)|(?:SESSION|SYSTEM)_USER|EXTRACT|UNNEST)\\b",
          "name": "meta.function.sql"
        },
        {
          "captures": { "1": { "name": "support.function.cast.sql" } },
          "match": "(?i)\\b((?:SAFE_)?CAST|PARSE_(?:BIGNUMERIC|NUMERIC))\\b",
          "name": "meta.function.sql"
        },
        {
          "captures": { "1": { "name": "support.function.date.sql" } },
          "match": "(?i)\\b(DATE|DATETIME|TIME(?:STAMP)?|STRING|(?:DATE|DATETIME|TIME(?:STAMP)?)_(?:ADD|SUB|DIFF|TRUNC)|DATE_FROM_UNIX_DATE|(?:FORMAT|PARSE)_(?:DATE|DATETIME|TIME(?:STAMP)?)|UNIX_(?:DATE|SECONDS|MILLIS|MICROS)|TIMESTAMP_(?:SECONDS|MILLIS|MICROS)|LAST_DAY)(?=\\s*\\()",
          "name": "meta.function.sql"
        },
        {
          "captures": { "1": { "name": "support.function.net.sql" } },
          "match": "(?i)\\b(NET\\.(?:IP_FROM_STRING|SAFE_IP_FROM_STRING|IP_TO_STRING|IP_NET_MASK|IP_TRUNC|IPV4_FROM_INT64|IPV4_TO_INT64|HOST|PUBLIC_SUFFIX|REG_DOMAIN))\\b",
          "name": "meta.function.sql"
        },
        {
          "captures": { "1": { "name": "support.function.math.sql" } },
          "match": "(?i)\\b(ABS|SIGN|IS_(?:INF|NAN)|IEEE_DIVIDE|RAND|SQRT|POW|POWER|EXP|LN|LOG|LOG10|GREATEST|LEAST|DIV|SAFE_DIVIDE|MOD|ROUND|TRUNC|CEIL|CEILING|FLOOR|COS|COSH|ACOS|ACOSH|SIN|SINH|ASIN|ASINH|TAN|TANH|ATAN|ATANH|ATAN2|RANGE_BUCKET)\\b",
          "name": "meta.function.sql"
        },
        {
          "captures": { "1": { "name": "support.function.aggregate.sql" } },
          "match": "(?i)\\b(AVG|COUNT|MIN|MAX|SUM|ANY_VALUE|ARRAY_AGG|ARRAY_CONCAT_AGG|BIT_AND|BIT_OR|BIT_XOR|COUNTIF|LOGICAL_AND|LOGICAL_OR|STRING_AGG|CORR|COVAR_POP|COVAR_SAMP|STDDEV_POP|STDDEV_SAMP|STDDEV|VAR_POP|VAR_SAMP|VARIANCE|APPROX_COUNT_DISTINCT|APPROX_QUANTILES|APPROX_TOP_COUNT|APPROX_TOP_SUM|HLL_COUNT\\.[\\w_]+)(?=\\s*\\()",
          "name": "meta.function.sql"
        },
        {
          "captures": {
            "1": { "name": "support.function.aggregate.sql.array" }
          },
          "match": "(?i)\\b(ARRAY_(?:CONCAT|LENGTH|TO_STRING|REVERSE)|GENERATE_(?:ARRAY|DATE_ARRAY|TIMESTAMP_ARRAY)|(?:SAFE_)?(?:OFFSET|ORDINAL))(?=\\s*\\()",
          "name": "meta.function.sql"
        },
        {
          "captures": { "1": { "name": "support.function.string.sql" } },
          "match": "(?i)\\b(ASCII|(?:BYTE|CHAR|CHARACTER|OCTET)_LENGTH|CHR|CODE_POINTS_TO_(?:BYTES|STRING)|CONCAT|BYTE_LENGTH|CHAR_LENGTH|CHARACTER_LENGTH|CONCAT|ENDS_WITH|FORMAT|FROM_(?:BASE32|BASE64|HEX)|INITCAP|INSTR|LENGTH|LPAD|LOWER|LTRIM|NORMALIZE|NORMALIZE_AND_CASEFOLD|REGEXP_(?:CONTAINS|EXTRACT|EXTRACT_ALL|INSTR|REPLACE|SUBSTR)|REPLACE(?!\\]|\\s+(?:schema|table|view|materialized(?:\\s+view)?|external\\s+table|model|function|procedure))|REPEAT|REVERSE|RPAD|RTRIM|SAFE_CONVERT_BYTES_TO_STRING|SOUNDEX|SPLIT|STARTS_WITH|STRPOS|SUBSTR|SUBSTRING|TO_(?:BASE32|BASE64|CODE_POINTS|HEX)|TRANSLATE|TRIM|UNICODE|UPPER)\\b",
          "name": "meta.function.sql"
        },
        {
          "captures": { "1": { "name": "support.function.string.param.sql" } },
          "match": "(?i)\\b(LEFT|RIGHT)(?=\\s*\\()",
          "name": "meta.function.sql"
        },
        {
          "captures": { "1": { "name": "support.function.string.hash.sql" } },
          "match": "(?i)\\b(FARM_FINGERPRINT|MD5|SHA(?:1|256|512))\\b",
          "name": "meta.function.sql"
        },
        {
          "captures": { "1": { "name": "support.function.json.sql" } },
          "match": "(?i)\\b(JSON_QUERY|JSON_VALUE|JSON_(?:QUERY|VALUE)_ARRAY|TO_JSON_STRING)\\b",
          "name": "meta.function.sql"
        },
        {
          "match": "(?i)\\b(JSON_EXTRACT|JSON_EXTRACT_(?:SCALAR|ARRAY|STRING_ARRAY))\\b",
          "name": "invalid.deprecated.legacy.function.sql.json"
        },
        {
          "captures": { "1": { "name": "support.function.window.sql" } },
          "match": "(?i)\\b(ROW_NUMBER|RANK|DENSE_RANK|PERCENT_RANK|CUME_DIST|NTILE|LAG|LEAD|(?:FIRST|LAST|NTH)_VALUE|PERCENTILE_(?:CONT|DISC)|BIT_COUNT)\\b",
          "name": "meta.function.sql"
        },
        {
          "captures": { "1": { "name": "support.function.over.sql" } },
          "match": "(?i)\\b(OVER)\\b",
          "name": "meta.function.sql"
        },
        {
          "captures": { "1": { "name": "support.function.conditional.sql" } },
          "match": "(?i)\\b(COALESCE|IF[^\\s]|NULLIF|IFNULL)\\b",
          "name": "meta.function.sql"
        },
        {
          "captures": { "1": { "name": "support.function.debug.sql" } },
          "match": "(?i)\\b(ERROR)(?=\\s*\\()",
          "name": "meta.function.sql"
        },
        {
          "captures": { "1": { "name": "support.function.debug.sql" } },
          "match": "(?i)\\b(SAFE\\.[\\w_]+)(?=\\s*\\()",
          "name": "meta.function.sql"
        },
        {
          "captures": { "1": { "name": "support.function.ml.sql" } },
          "match": "(?i)\\b(ML\\.(?:EVALUATE|ROC_CURVE|CONFUSION_MATRIX|TRAINING_INFO|FEATURE_INFO|WEIGHTS|PREDICT))\\b",
          "name": "meta.function.sql"
        },
        {
          "captures": { "1": { "name": "support.function.gis.sql" } },
          "match": "(?i)\\b(ST_(?:AREA|ASBINARY|ASGEOJSON|ASTEXT|BOUNDARY|CENTROID|CENTROID_AGG|CLOSESTPOINT|CLUSTERDBSCAN|CONTAINS|CONVEXHULL|COVEREDBY|COVERS|DIFFERENCE|DIMENSION|DISJOINT|DISTANCE|DUMP|DWITHIN|ENDPOINT|EQUALS|GEOGFROM|GEOGFROMGEOJSON|GEOGFROMTEXT|GEOGFROMWKB|GEOGPOINT|GEOGPOINTFROMGEOHASH|GEOHASH|INTERSECTION|INTERSECTS|INTERSECTSBOX|ISCOLLECTION|ISEMPTY|LENGTH|MAKELINE|MAKEPOLYGON|MAKEPOLYGONORIENTED|MAXDISTANCE|NPOINTS|NUMPOINTS|PERIMETER|POINTN|SIMPLIFY|SNAPTOGRID|STARTPOINT|TOUCHES|UNION|UNION_AGG|WITHIN|X|Y))\\b",
          "name": "meta.function.sql"
        },
        {
          "captures": { "1": { "name": "support.function.keys.sql" } },
          "match": "(?i)\\b(KEYS\\.(?:NEW_KEYSET|ADD_KEY_FROM_RAW_BYTES|KEYSET_FROM_JSON|KEYSET_TO_JSON|ROTATE_KEYSET))\\b",
          "name": "meta.function.sql"
        },
        {
          "captures": { "1": { "name": "support.function.aead.sql" } },
          "match": "(?i)\\b(AEAD\\.(?:DECRYPT_BYTES|DECRYPT_STRING|ENCRYPT))\\b",
          "name": "meta.function.sql"
        },
        {
          "captures": { "1": { "name": "support.function.federated.sql" } },
          "match": "(?i)\\b(EXTERNAL_QUERY)\\b",
          "name": "meta.function.sql"
        },
        {
          "match": "(?i)\\b(EXACT_COUNT_DISTINCT|FIRST|GROUP_CONCAT(_UNQUOTED)?|LAST|NEST|NTH|QUANTILES|TOP|UNIQUE)(?=\\s*\\()",
          "name": "invalid.deprecated.legacy.aggregate.sql"
        },
        {
          "match": "(?i)\\b(BOOLEAN|BYTES|FLOAT|HEX_STRING|INTEGER)(?=\\s*\\()",
          "name": "invalid.deprecated.legacy.cast.sql"
        },
        {
          "match": "(?i)\\b(IS_EXPLICITLY_DEFINED|NVL)(?=\\s*\\()",
          "name": "invalid.deprecated.legacy.comparison.sql"
        },
        {
          "match": "(?i)\\b(DATEDIFF|DAY(OFWEEK|OFYEAR)?|FORMAT_UTC_USEC|HOUR|MINUTE|MONTH|MSEC_TO_TIMESTAMP|NOW|PARSE_UTC_USEC|QUARTER|SEC_TO_TIMESTAMP|SECOND|STRFTIME_UTC_USEC|TIMESTAMP_TO_(MSEC|SEC|USEC)|USEC_TO_TIMESTAMP|UTC_USEC_TO_(DAY|HOUR|MONTH|WEEK|YEAR)|WEEK|YEAR)(?=\\s*\\()",
          "name": "invalid.deprecated.legacy.date.sql"
        },
        {
          "match": "(?i)\\b((FORMAT|PARSE|(FORMAT|PARSE)_PACKED)_IP|HOST|DOMAIN|TLD)(?=\\s*\\()",
          "name": "invalid.deprecated.legacy.net.sql"
        },
        {
          "match": "(?i)\\b(DEGREES|LOG2|PI|RADIANS)(?=\\s*\\()",
          "name": "invalid.deprecated.legacy.math.sql"
        },
        {
          "match": "(?i)\\b(REGEXP_MATCH)\\b",
          "name": "invalid.deprecated.legacy.regexp.sql"
        },
        {
          "match": "(?i)\\bCONTAINS\\b",
          "name": "invalid.deprecated.legacy.string.II.sql"
        },
        {
          "match": "(?i)\\b(TABLE_(DATE_RANGE(_STRICT)?|QUERY))\\b",
          "name": "invalid.deprecated.legacy.table.sql"
        },
        {
          "match": "(?i)\\bRATIO_TO_REPORT\\b",
          "name": "invalid.deprecated.legacy.window.sql"
        },
        {
          "match": "(?i)\\b(EVERY|HASH|POSITION|SOME)(?=\\s*\\()",
          "name": "invalid.deprecated.legacy.other.sql"
        }
      ]
    },
    "ddl": {
      "patterns": [
        {
          "captures": {
            "1": { "name": "keyword.ddl.sql" },
            "2": { "name": "keyword.ddl.object.sql" },
            "3": { "name": "keyword.ddl.if.sql" },
            "4": { "name": "punctuation.definition.string.begin.sql" },
            "5": { "name": "entity.name.project.sql" },
            "6": { "name": "entity.name.dataset.sql" },
            "7": { "name": "entity.name.object.sql" },
            "8": { "name": "punctuation.definition.string.end.sql" },
            "9": { "name": "keyword.ddl.as.sql" }
          },
          "match": "(?i:)^\\s*(create(?:\\s+or\\s+replace)?(?:\\s+temporary|\\s+temp)?|drop|alter)\\s+(schema|table(?:\\s+function)?|view|materialized\\s+view|(?:external|snapshot)\\s+table|model|function|procedure|column)\\b(?:\\s+(if(?:\\s+not)?\\s+exists)\\b)?(?:\\s+(`?)(?:([\\w_]+)\\.)?(?:([\\w_]+)\\.([\\w_]+)(`?)))(?:\\s+(as))?",
          "name": "meta.ddl.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.ddl.sql" }
          },
          "match": "(?i:\\b(create(\\s+(temporary|temp))?|drop(\\s+column)?|schema|table(?:\\s+function)?|view|materialized(\\s+view)?|external\\s+table|snapshot|clone|if|not|exists|partition|cluster|options|data\\s+type|rows|range|unbounded|preceding|following|current|row|returns|language|deterministic|(\\s*or\\s+replace\\s+)?(function|procedure|model)(\\s*if\\s+not\\s+exists\\s+)?|(add|drop)\\s+column|cascade|restrict|rename|to)\\b)",
          "name": "meta.ddl.sql"
        }
      ]
    },
    "dml": {
      "patterns": [
        {
          "captures": {
            "1": { "name": "keyword.dml.sql" },
            "2": { "name": "punctuation.definition.string.begin.sql" },
            "3": { "name": "entity.name.project.sql" },
            "4": { "name": "entity.name.dataset.sql" },
            "5": { "name": "entity.name.object.sql" },
            "6": { "name": "entity.name.alias.sql" },
            "7": { "name": "punctuation.definition.string.end.sql" }
          },
          "match": "(?i)^\\b((?:insert|merge)(?:\\s+into)?|truncate\\s+table|update|delete\\s+from|delete(?!\\s+from))(?:\\s+(`)?(?:([\\w_]+)\\.)?(?:(?>([\\w_]+)\\.([\\w_]+)|(?<!\\.)([\\w_]+))(`)?))",
          "name": "meta.dml.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.dml.sql" }
          },
          "match": "(?i:\\b(insert|into|values|delete|update|set)\\b)",
          "name": "meta.dml.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.dml.sql" }
          },
          "match": "(?i:\\b(merge|matched|default|truncate)\\b)",
          "name": "meta.dml.sql"
        }
      ]
    },
    "from": {
      "patterns": [
        {
          "captures": {
            "1": { "name": "keyword.from.sql" },
            "2": { "name": "keyword.join.sql" },
            "3": { "name": "punctuation.definition.string.begin.sql" },
            "4": { "name": "entity.name.project.sql" },
            "5": { "name": "entity.name.dataset.sql" },
            "6": { "name": "entity.name.object.sql" },
            "7": { "name": "punctuation.definition.string.end.sql" },
            "8": { "name": "keyword.as.sql" },
            "9": { "name": "entity.name.alias.sql" }
          },
          "match": "(?i)(?:(from)|((?:(?:(?:inner|cross|(?:left|right|full)(?:\\s+outer)?)\\s+)join)))(?:\\s+(`?)(?:([\\w_]+)\\.)?(?:([\\w_]+)\\.([\\w_]+))(`?)(?:\\s+(?:(as)\\s+)?([\\w_]+))?)",
          "name": "meta.source.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.expression.operator.or.sql" },
            "2": { "name": "keyword.expression.operator.and.sql" }
          },
          "match": "(?i)\\b(?:(or)|(and))\\b",
          "name": "meta.operator.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.expression.join.on.sql" },
            "2": { "name": "keyword.expression.join.using.sql" }
          },
          "match": "(?i)\\b(?:(on)|(using))\\b",
          "name": "meta.operator.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.expression.negative.comparison.sql" },
            "2": { "name": "keyword.expression.comparison.sql" },
            "3": { "name": "keyword.expression.negative.comparison.sql" }
          },
          "match": "(?i)(?:\\b(?:(?:(not)\\b\\s+\\b)?(in|is)(?:\\b\\s+\b(not))?)\\b)",
          "name": "meta.comparison.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.where.sql" }
          },
          "match": "(?i)(?:\\b(where)\\b)",
          "name": "meta.where.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.group.sql" }
          },
          "match": "(?i)(?:\\b(group\\s+by)\\b)",
          "name": "meta.group.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.order.sql" }
          },
          "match": "(?i)(?:\\b(order\\s+by)\\b)",
          "name": "meta.order.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.limit.sql" }
          },
          "match": "(?i)(?:\\b(limit)\\b)",
          "name": "meta.limit.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.having.sql" }
          },
          "match": "(?i)(?:\\b(having)\\b)",
          "name": "meta.having.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.qualify.sql" }
          },
          "match": "(?i)(?:\\b(qualify)\\b)",
          "name": "meta.qualify.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.window.sql" }
          },
          "match": "(?i)(?:\\b(window)\\b)",
          "name": "meta.window.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.select.sql" },
            "2": { "name": "keyword.select.distinct.sql" }
          },
          "match": "(?i)(?:\\b(select)\\b(?:\\s+(distinct))?)",
          "name": "meta.select.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.select.limit.sql" },
            "2": { "name": "keyword.select.offset.sql" }
          },
          "match": "(?i)(?:\\b(limit)\\b(?:\\s+(\\d+))(?:\\s+(offset)\\b(?:\\s+(\\d+)))?)",
          "name": "meta.select.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.select.sql" }
          },
          "match": "(?i:\\b(select|all|distinct|except|replace|from|where|in|is|null|like|between|and|or|with|group|by|rollup|order|limit|having|window)\\b)",
          "name": "meta.select.all.sql"
        },
        {
          "match": "(?i:\\b(union|intersect|for|system|time|of|offset|system_time|tablesample|percent)\\b)",
          "name": "keyword.select.set_op.sql"
        },
        {
          "match": "(?i:\\b(inner|cross|full|left|right|outer|join|on|using)\\b)",
          "name": "keyword.select.join.sql"
        },
        {
          "match": "(?i:\\bfor\\s+system\\s+time\\s+as\\s+of\\b)",
          "name": "keyword.select.other.sql"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "captures": {
            "1": { "name": "keyword.order.sql" }
          },
          "match": "(?i)\\b(desc|asc)\\b",
          "name": "meta.order.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.partition.sql" }
          },
          "match": "(?i)(?:\\b(partition\\s+by)\\b)",
          "name": "meta.partition.sql"
        },
        {
          "captures": {
            "1": { "name": "punctuation.whitespace.leading.sql" },
            "2": { "name": "keyword.control.case.sql" }
          },
          "match": "(?i)(\\s*)\\b(case)\\b",
          "name": "meta.case.sql"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.control.when.sql"
            }
          },
          "match": "(?i)\\b(when)\\b",
          "name": "meta.case.sql"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.control.then.sql"
            }
          },
          "match": "(?i)\\b(then)\\b",
          "name": "meta.case.sql"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.control.else.sql"
            }
          },
          "match": "(?i)\\b(else)\\b",
          "name": "meta.case.sql"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.control.case.part.end.sql"
            }
          },
          "match": "(?i)(\\s+(?=when)|\\s+(?=then)|\\s+(?=else)|\\s+(?=end))",
          "name": "meta.case.sql"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.control.case.end.sql"
            }
          },
          "match": "(?i)\\b(end)\\b",
          "name": "meta.case.sql"
        },
        {
          "match": "\\*",
          "name": "keyword.operator.star.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.operator.comparison.sql" }
          },
          "match": "([!<>]?=|<>|<|>)",
          "name": "meta.comparison.sql"
        },
        {
          "match": "-|\\+|/|~",
          "name": "keyword.operator.math.sql"
        },
        {
          "match": "\\|\\|",
          "name": "keyword.operator.concatenator.sql"
        },
        {
          "match": "<<|>>|\\&|\\^|\\|",
          "name": "keyword.operator.byte.sql"
        },
        {
          "match": "%",
          "name": "invalid.deprecated.legacy.operator.sql"
        },
        {
          "match": "(?i:\\b(grant|revoke)\\b)",
          "name": "keyword.dcl.sql"
        },
        {
          "match": "(?i:\\b(assert|export\\s+data|pivot|unpivot|qualify|include|exclude)\\b)",
          "name": "keyword.statement.sql"
        },
        {
          "match": "(?i:\\b(over|ignore|respect|nulls|first|last|interval|at|zone|at\\s+time\\s+zone)\\b)",
          "name": "keyword.function.sql"
        },
        {
          "match": "(?i:(?>[[:alpha:]]+\\s+\\b(?:day|week|month|quarter|year|(?:(?:micro|milli)?second)|minute|hour)|(day|week|month|quarter|year|(?:(?:micro|milli)?second)|minute|hour))\\b)",
          "name": "keyword.function.sql"
        },
        {
          "match": "(?i:\\b(procedure|begin|exception|error[^\\.\\(]|out|inout|call|declare|if|elseif|end\\s+if|loop|while|do|break|leave|continue|iterate|return|execute|immediate|raise|message)\\b)",
          "name": "keyword.procedure.sql"
        },
        {
          "match": "(?i)\\b(as)\\b",
          "name": "keyword.as.sql"
        }
      ]
    },
    "columns": {
      "patterns": [
        {
          "captures": {
            "1": { "name": "entity.name.alias.sql" },
            "2": { "name": "punctuation.separator.period.sql" },
            "3": { "name": "entity.other.column.sql" },
            "4": { "name": "keyword.as.sql" },
            "5": { "name": "entity.name.tag" }
          },
          "match": "(?i)([\\w_]+)(\\.)([\\w_]+)[ \\t]+(as)[ \\t]+([\\w_]+)(?=\\s*?(?:,|\\n|from))",
          "name": "meta.column.explicit.alias.sql"
        },
        {
          "captures": {
            "1": { "name": "entity.name.alias.sql" },
            "2": { "name": "punctuation.separator.period.sql" },
            "3": { "name": "entity.other.column.sql" },
            "4": { "name": "entity.name.tag" }
          },
          "match": "(?i)([\\w_]+)(\\.)([\\w_]+)[ \\t]+(?:(?>as|([\\w_]+)))(?=\\s*?(?:,|\\n|from))",
          "name": "meta.column.implicit.alias.sql"
        },
        {
          "captures": {
            "1": { "name": "entity.name.alias.sql" },
            "2": { "name": "punctuation.separator.period.sql" },
            "3": { "name": "entity.other.column.sql" }
          },
          "match": "(?i)([\\w_]+)(\\.)([\\w_]+)",
          "name": "meta.column.no.alias.sql"
        },
        {
          "captures": {
            "1": { "name": "entity.other.column.sql" }
          },
          "match": "(?i)^[ \\t]*?([\\w_]+)(?=\\s*?(?:,|\\n|from))",
          "name": "meta.column.sql"
        },
        {
          "captures": {
            "1": { "name": "entity.other.column.sql" }
          },
          "match": "(?i)(?<=select )([\\w_]+)(?=\\s*?(?:,|\\n|from))",
          "name": "meta.column.sql"
        },
        {
          "captures": {
            "1": { "name": "entity.other.column.sql" }
          },
          "match": "(?i)(?<=distinct )([\\w_]+)(?=\\s*?(?:,|\\n|from))",
          "name": "meta.column.sql"
        },
        {
          "captures": {
            "1": { "name": "entity.other.column.sql" }
          },
          "match": "(?i)(?<=by )([\\w_]+)(?=\\s*?(?:,|\\n|from))",
          "name": "meta.column.sql"
        },
        {
          "captures": {
            "1": { "name": "entity.other.column.sql" }
          },
          "match": "(?i)(?<=\\()([\\w_]+)(?=\\s*?(?:,|\\n|from))",
          "name": "meta.column.sql"
        },
        {
          "captures": {
            "1": { "name": "entity.other.column.sql" }
          },
          "match": "(?i)(?<=,)[ \\t]*?(\\w+)(?=\\s*?(?:,|\\n|from))",
          "name": "meta.column.sql"
        },
        {
          "captures": {
            "1": { "name": "keyword.as.sql" },
            "2": { "name": "entity.name.tag" }
          },
          "match": "(?i)(?:(as)[ \\t]+)?([\\w_]+)(?=\\s*?(?:,|\\n|from))",
          "name": "meta.column.alias.sql"
        },
        {
          "captures": {
            "1": { "name": "entity.other.column.sql" }
          },
          "match": "(?i)([\\w_]+)",
          "name": "meta.column.sql"
        }
      ]
    },
    "custom": {
      "patterns": [
        {
          "captures": {
            "1": { "name": "entity.name.dataset.sql" },
            "2": { "name": "entity.name.object.sql" },
            "3": { "name": "keyword.dml.sql" }
          },
          "match": "(?i)(?:([\\w_]+)\\.([\\w_]+)\\:([\\w_]+)\\:)",
          "name": "meta.dml.sql"
        }
      ]
    },
    "params": {
      "patterns": [
        {
          "captures": {
            "1": { "name": "variable.parameter.sql" }
          },
          "match": "(?i)(\\@\\b[\\w_]+)\\b",
          "name": "meta.parameter.sql"
        }
      ]
    }
  },
  "scopeName": "source.googlesql"
}
