===========================================
Rule: All Columns Should Have a Table Alias
===========================================

**Rule Code:** ``AL05``

**Name:** ``unused_alias``

Overview
--------

In SQL queries, when using table aliases, it is important to reference all columns using their corresponding table aliases. This ensures clarity and avoids ambiguity, particularly in queries that involve multiple tables or joins. Not using the table alias for column references, even when an alias has been assigned, can lead to confusion and inconsistency. Using explicit table aliases for all columns improves the readability and maintainability of the query.

Explanation
-----------

Anti-pattern: Not Using Table Alias for Columns
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In some cases, developers may assign a table alias but fail to use it when referencing columns. This is considered an anti-pattern because it introduces inconsistency in the query and may lead to ambiguity, especially when multiple tables are involved. Not using the table alias reduces the clarity of the query, making it harder to understand which table a column belongs to.

**Example of Not Using Table Alias for Columns (Anti-pattern):**

.. code-block:: sql

    select foo 
      from bar b;

In this example, the table `bar` has been assigned the alias `b`, but the column `foo` is referenced without using the alias. This inconsistency can lead to confusion, especially in more complex queries.

Best Practice: Use Table Alias for All Columns
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For better readability and consistency, all columns should be referenced using the table alias when an alias is defined. This practice ensures that the query is clear, reduces ambiguity, and makes it easier to understand which table each column is being selected from, especially in queries with multiple tables.

**Refactored Example with Table Alias for All Columns (Best Practice):**

.. code-block:: sql

    select b.foo
      from bar b;

In this refactored example, the column `foo` is referenced with the table alias `b`, providing clarity and consistency throughout the query.

Conclusion
----------

Using table aliases for all column references ensures that SQL queries are clear, consistent, and easy to maintain. By following this rule, developers can avoid ambiguity and improve the readability of their queries, particularly when working with complex joins or multiple tables.

Groups:
-------

- `all <../..>`_
- `aliasing <../..#aliasing-rules>`_